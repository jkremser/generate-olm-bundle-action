# Copyright 2021 The k8gb Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
###############################
#       DOTENV
###############################
ifneq ($(wildcard ./.env),)
	include .env
	export
endif


###############################
#		CONSTANTS
###############################
BUNDLE_VERSION ?= 0.0.4
CRDS_DIR ?= chart/k8gb/templates/crds
DEPLOY_DIR ?= deploy-tmp/
OPERATOR_SDK_VERSION ?= v1.13.0
OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/$(OPERATOR_SDK_VERSION)
PWD ?= $(shell pwd)
REPO_ROOT ?= $(PWD)
PREPARE_HELM_COMMAND ?= "cd ./chart/k8gb && helm dependency update"

ifndef NO_COLOR
YELLOW=\033[0;33m
CYAN=\033[1;36m
# no color
NC=\033[0m
endif

ifeq ($(shell uname -m),x86_64)
	ARCH ?= amd64
else 
	ifeq ($(shell uname -m),aarch64)
		ARCH ?= arm64
	else
		ARCH ?= $(shell uname -m)
	endif
endif

OS=$(shell uname | tr '[:upper:]' '[:lower:]')

 
###############################
#		TARGETS
###############################

.PHONY: deployment-blueprint
deployment-blueprint: ## Renders the helm chart to provide a snapshot of the deployment manifests
	@echo "$(CYAN)Generating deployment yaml manifests using helm..$(NC)\n"
	-rm -Rf $(DEPLOY_DIR)
	mkdir -p $(DEPLOY_DIR)
	eval $(PREPARE_HELM_COMMAND)
	sh -c "$(HELM_COMMAND)" > all.yaml
	@echo "first 5 lines:"
	-@head -5 all.yaml
	@echo "..."
	-mv all.yaml $(DEPLOY_DIR)
	@echo "$(YELLOW)Deployment manifests have been generated$(NC)\n"

.PHONY: bundle-generate
bundle-generate: ## Generate bundle directory for Operator Lifecycle Manager
	@echo "$(CYAN)Generating bundle..$(NC)\n"
	$(call operator-sdk,generate bundle --crds-dir $(CRDS_DIR) --deploy-dir $(DEPLOY_DIR) -v $(BUNDLE_VERSION))
	-rm -Rf $(DEPLOY_DIR)

needs-yq:
	@which yq > /dev/null || ( echo Tool yq not found, please install it first, see http://mikefarah.github.io/yq/#install && exit 1 )

.PHONY: bundle-add-examples
bundle-add-examples: needs-yq ## Adds the content of two example custom resources to the CSV manifest
	@echo "$(CYAN)Adding examples to CSV file..$(NC)\n"
	-@echo [ > json.tmp
	-@yq eval -o=j -I 0 deploy/crds/k8gb.absa.oss_v1beta1_gslb_cr_failover.yaml | sed "s|\"|\\\\\"|g" >> json.tmp
	-@echo , >> json.tmp
	-@yq eval -o=j -I 0 deploy/crds/k8gb.absa.oss_v1beta1_gslb_cr.yaml | sed "s|\"|\\\\\"|g" >> json.tmp
	-@echo ] >> json.tmp
	yq eval '.metadata.annotations.alm-examples = "'"$$(cat json.tmp | tr -d '\n')"'"' \
	     --inplace bundle/manifests/k8gb.clusterserviceversion.yaml
	-@rm json.tmp
	@echo "$(YELLOW)Examples with CRs have been added to CSV manifest$(NC)\n"

.PHONY: bundle-add-crd-info
bundle-add-crd-info: needs-yq ## Enrich the .spec.customresourcedefinitions.owned w/ displayName and description
	@echo "$(CYAN)Adding additional information to CSV manifest..$(NC)\n"
	yq eval '.spec.customresourcedefinitions.owned[] |= select(.kind).displayName = .kind' \
	   --inplace  bundle/manifests/k8gb.clusterserviceversion.yaml
	yq eval '.spec.customresourcedefinitions.owned[] |= select(.kind == "Gslb").description = "Gslb is the Schema for the gslbs API"' \
	   --inplace  bundle/manifests/k8gb.clusterserviceversion.yaml
	yq eval '.spec.customresourcedefinitions.owned[] |= select(.kind == "DNSEndpoint").description = "Endpoint is a high-level way of a connection between a service and an IP"' \
	   --inplace  bundle/manifests/k8gb.clusterserviceversion.yaml
	@echo "$(YELLOW)Display names and descriptions have been added$(NC)\n"

.PHONY: bundle-remove-local
bundle-remove-local: ## Removes ./bundle and ./bundle.Dockerfile (these are generated by make bundle-generate)
	-rm -Rf ./bundle
	-rm -Rf ./bundle.Dockerfile
	@echo "$(YELLOW)Local ./bundle directory has been removed$(NC)\n"

.PHONY: bundle-full
bundle-full: deployment-blueprint bundle-remove-local bundle-generate bundle-add-examples bundle-add-crd-info bundle-validate ## Prepares ./bundle directory including the necessary intermediate steps
	@echo "\n\n$(YELLOW)Bundle has been built$(NC)\n"

.PHONY: bundle-validate
bundle-validate: ## Validate the CSV file
	@echo "$(CYAN)Validating bundle..$(NC)\n"
	$(call operator-sdk,bundle validate ./bundle --optional-values=index-path=bundle.Dockerfile)
	@echo "$(YELLOW)Bundle is OK!$(NC)\n"

.PHONY: help
help: ## Show this help
	@egrep -h '\s##\s' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'


###############################
#		FUNCTIONS
###############################

define operator-sdk
	@which operator-sdk > /dev/null || { \
		echo "$(YELLOW)Downloading operator-sdk..$(NC)" ; \
		curl -sLo /usr/bin/operator-sdk $(OPERATOR_SDK_DL_URL)/operator-sdk_$(OS)_$(ARCH) ; \
		chmod +x /usr/bin/operator-sdk ; \
	}
	operator-sdk $1
endef